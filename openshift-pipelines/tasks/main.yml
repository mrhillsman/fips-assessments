---
# Create assessment_result fact
- name: Set assessment_result fact default to pass
  ansible.builtin.set_fact:
    assessment_result: "pass"

- name: Run openshift-pipelines assessment
  block:
    # Create pipelines-tutorial namespace
    - name: Create the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: pipelines-tutorial

    # Create ServiceAccount pipeline in the pipelines-tutorial namespace
    - name: Create ServiceAccount pipeline in pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: ServiceAccount
        namespace: pipelines-tutorial
        name: pipeline
      register: serviceaccount_pipeline

    # Create PersistentVolumeClaim shared-workspace in the pipelines-tutorial namespace
    - name: Create the PersistentVolumeClaim shared-workspace in the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: pipelines-tutorial
        name: shared-workspace
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: shared-workspace
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
        wait: true

    # Create the apply-manifest and update-deployment Tekton tasks in the pipelines-tutorial namespace
    - name: Create the apply-manifest task in the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: tekton.dev/v1beta1
        kind: Task
        namespace: pipelines-tutorial
        name: apply-manifest
        definition:
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: apply-manifests
          spec:
            workspaces:
              - name: source
            params:
              - name: manifest_dir
                description: The directory in source that contains yaml manifests
                type: string
                default: "k8s"
            steps:
              - name: apply
                image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                workingDir: /workspace/source
                command: ["/bin/bash", "-c"]
                args:
                  - |-
                    echo Applying manifests in $(inputs.params.manifest_dir) directory
                    oc apply -f $(inputs.params.manifest_dir)
                    echo -----------------------------------

    - name: Create the update-deployment task in the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: tekton.dev/v1beta1
        kind: Task
        namespace: pipelines-tutorial
        name: update-deployment
        definition:
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            name: update-deployment
          spec:
            params:
              - name: deployment
                description: The name of the deployment patch the image
                type: string
              - name: IMAGE
                description: Location of image to be patched with
                type: string
            steps:
              - name: patch
                image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                command: ["/bin/bash", "-c"]
                args:
                  - |-
                    oc patch deployment $(inputs.params.deployment) --patch='{"spec":{"template":{"spec":{
                      "containers":[{
                        "name": "$(inputs.params.deployment)",
                        "image":"$(inputs.params.IMAGE)"
                      }]
                    }}}}'

                    # issue: https://issues.redhat.com/browse/SRVKP-2387
                    # images are deployed with tag. on rebuild of the image tags are not updated, hence redeploy is not happening
                    # as a workaround update a label in template, which triggers redeploy pods
                    # target label: "spec.template.metadata.labels.patched_at"
                    # NOTE: this workaround works only if the pod spec has imagePullPolicy: Always
                    patched_at_timestamp=`date +%s`
                    oc patch deployment $(inputs.params.deployment) --patch='{"spec":{"template":{"metadata":{
                      "labels":{
                        "patched_at": '\"$patched_at_timestamp\"'
                      }
                    }}}}'

    # Create the build-and-deploy Tekton pipeline in the pipelines-tutorial namespace
    - name: Create the build-and-deploy pipeline in the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: tekton.dev/v1beta1
        kind: Pipeline
        namespace: pipelines-tutorial
        name: build-and-deploy
        definition:
          apiVersion: tekton.dev/v1
          kind: Pipeline
          metadata:
            name: build-and-deploy
          spec:
            workspaces:
              - name: shared-workspace
            params:
              - name: deployment-name
                type: string
                description: name of the deployment to be patched
              - name: git-url
                type: string
                description: url of the git repo for the code of deployment
              - name: git-revision
                type: string
                description: revision to be used from repo of the code for deployment
                default: master
              - name: IMAGE
                type: string
                description: image to be build from the code
            tasks:
              - name: fetch-repository
                taskRef:
                  name: git-clone
                  kind: ClusterTask
                workspaces:
                  - name: output
                    workspace: shared-workspace
                params:
                  - name: url
                    value: $(params.git-url)
                  - name: subdirectory
                    value: ""
                  - name: deleteExisting
                    value: "true"
                  - name: revision
                    value: $(params.git-revision)
              - name: build-image
                taskRef:
                  name: buildah
                  kind: ClusterTask
                params:
                  - name: IMAGE
                    value: $(params.IMAGE)
                workspaces:
                  - name: source
                    workspace: shared-workspace
              - name: apply-manifests
                taskRef:
                  name: apply-manifests
                workspaces:
                  - name: source
                    workspace: shared-workspace
                runAfter:
                  - build-image
              - name: update-deployment
                taskRef:
                  name: update-deployment
                params:
                  - name: deployment
                    value: $(params.deployment-name)
                  - name: IMAGE
                    value: $(params.IMAGE)
                runAfter:
                  - apply-manifests

    # Create the build-deploy-api-pipelinerun and build-deploy-ui-pipelinerun Tekton PipelineRuns in the pipelines-tutorial namespace
    - name: Create the build-deploy-api-pipelinerun in the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: tekton.dev/v1beta1
        kind: PipelineRun
        namespace: pipelines-tutorial
        name: build-deploy-api-pipelinerun
        definition:
          apiVersion: tekton.dev/v1
          kind: PipelineRun
          metadata:
            name: build-deploy-api-pipelinerun
          spec:
            pipelineRef:
              name: build-and-deploy
            taskRunTemplate:
              serviceAccountName: pipeline
            params:
              - name: deployment-name
                value: pipelines-vote-api
              - name: git-url
                value: https://github.com/jianrongzhang89/pipelines-vote-api.git
              - name: IMAGE
                value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/pipelines-vote-api
            workspaces:
              - name: shared-workspace
                persistentVolumeClaim:
                  claimName: shared-workspace
        wait: true
        wait_condition:
          type: Succeeded
          status: "True"
          reason: Succeeded

    - name: Create the build-deploy-ui-pipelinerun in the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: present
        api_version: tekton.dev/v1beta1
        kind: PipelineRun
        namespace: pipelines-tutorial
        name: build-deploy-ui-pipelinerun
        definition:
          apiVersion: tekton.dev/v1
          kind: PipelineRun
          metadata:
            name: build-deploy-ui-pipelinerun
          spec:
            pipelineRef:
              name: build-and-deploy
            taskRunTemplate:
              serviceAccountName: pipeline
            params:
              - name: deployment-name
                value: pipelines-vote-ui
              - name: git-url
                value: https://github.com/jianrongzhang89/pipelines-vote-ui.git
              - name: IMAGE
                value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/pipelines-vote-ui
            workspaces:
              - name: shared-workspace
                persistentVolumeClaim:
                  claimName: shared-workspace
        wait: true
        wait_condition:
          type: Succeeded
          status: "True"
          reason: Succeeded
  rescue:
    # Set assessment_result and assessment_result_message facts on failure
    - name: Set assessment_result fact to fail
      ansible.builtin.set_fact:
        assessment_result: "fail"

    - name: Set assessment_result_message fact
      ansible.builtin.set_fact:
        assessment_result_message: '{{ ansible_failed_result.msg }}'
  always:
    # Remove the pipelines-tutorial namespace; will remove all the resources created in the namespace
    - name: Remove the pipelines-tutorial namespace
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Namespace
        name: pipelines-tutorial
        wait: true

    # Output assessment_result fact
    - name: OpenShift-Pipelines Result
      ansible.builtin.debug:
        msg: "{% if assessment_result == 'pass' %}PASS{% else %}FAIL: {{ assessment_result_message }}{% endif %}"
